{"version":3,"sources":["components/card.js","components/cardList.js","components/robots.js","components/search_box.js","components/scroll.js","components/ErrorBoundary.js","containers/app.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","src","alt","CardList","robots","className","map","user","i","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","erro","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.848224b1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = (props) =>{ //takes properties as props\r\n\tconst {name, email, id} = props; // {} is also known as destructuring\r\n\t// console.log(props);\r\n\t// we get the properties name, id and email from the card input in index.js and use them as seperate variables\r\n\t// {``} is like the format string of python, and ${} is used as the variables\r\n\treturn (\r\n\t\t<div id=\"card_body\">\r\n\t\t\t<img src={`https://robohash.org/${id}/set_set1?size=200x200`} alt=\"robots\" />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\nimport \"./cardList.css\";\r\n\r\nconst CardList = (props) =>{ \r\n\t// console.log(props);\r\n\t// we can do 3 stuffs:\r\n\t// 1. {robots} = props {aka deconstructions}\r\n\t// 2. robots = props.robots\r\n\t// 3. or use {robots} instead of props in CardList funnction\r\n\tconst robots = props.robots;\r\n\treturn (\r\n\t\t<div className=\"cardList\">\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>;\r\n\t\t\t\t\t}\r\n\t\t\t\t) // Don't use `;` inside HTML JSX variable\r\n\t\t\t}\t  \t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];","import React from \"react\";\r\n\r\nimport \"./search_box.css\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<input \r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"Search Robots\"\r\n\t\tonChange={searchChange}/>\r\n\t);\r\n}\r\n\r\n\r\n// onSearchChange = (event) =>{\r\n// \t\tthis.setState({searchField: event.target.value});\r\n// \t\tconst filteredRobots = this.state.robots.filter(robots=>{\r\n// \t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n// \t\t})\r\n// \t\tconsole.log(filteredRobots);\r\n// \t}\r\n\t\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n\t// console.log(props.children);\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(erro, info){\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn(\r\n\t\t\t\t<h1>Opps Something is Wrong</h1>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (this.props.children);\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\nimport CardList from \"../components/cardList\";\r\nimport {robots} from \"../components/robots\";\r\nimport SearchBox from \"../components/search_box\";\r\nimport Scroll from \"../components/scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\nimport \"./app.css\";\r\n\r\n \r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: robots,\r\n\t\t\tsearchField: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchField: event.target.value});\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst robots = this.state.robots;\r\n\t\tconst searchField = this.state.searchField;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\r\n\t\tif(!robots.length){\r\n\t\t\treturn <h1>LOADING</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div id=\"wrapper\">\r\n\t\t\t\t\t<div id=\"search\">\r\n\t\t\t\t\t\t<h1> RoboFriends </h1>\r\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/app\";\nimport reportWebVitals from './reportWebVitals';\n\n\n//Stuffs after card element are called props, rather than attributes\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}